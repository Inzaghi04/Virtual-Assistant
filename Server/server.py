from flask import Flask, request, jsonify, send_from_directory
import os
import speech_recognition as sr
import google.generativeai as genai
from gtts import gTTS
from werkzeug.utils import secure_filename
from concurrent.futures import ThreadPoolExecutor
import time
import pandas as pd
from datetime import datetime
from collections import defaultdict
import requests

# === C·∫•u h√¨nh ===
API_KEY = "API"  # ‚Üê Thay b·∫±ng API key c·ªßa b·∫°n
SERPER_API_KEY = "API"
UPLOAD_FOLDER = "./uploads"
os.makedirs(UPLOAD_FOLDER, exist_ok=True)

genai.configure(api_key=API_KEY)
model = genai.GenerativeModel("gemini-2.0-flash")

app = Flask(__name__)
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER

executor = ThreadPoolExecutor(max_workers=2)
user_histories = defaultdict(list)

# === H√†m ki·ªÉm tra c√≥ n√™n t√¨m ki·∫øm tr√™n Google hay kh√¥ng ===
def should_search_web(prompt):
    prompt = prompt.lower()
    keywords = [
        "th·ªùi ti·∫øt", "h√¥m nay m·∫•y ƒë·ªô", "tr·ªùi",
        "ng√†y bao nhi√™u", "th·ª© m·∫•y", "h√¥m nay l√† ng√†y",
        "bao nhi√™u ƒë·ªô", "nhi·ªát ƒë·ªô", "d·ª± b√°o",
        "ng√†y mai", "l·ªãch", "gi·ªù", "m·∫•y gi·ªù", "gi·ªù m·∫•y"
    ]
    return any(keyword in prompt for keyword in keywords)

# === H√†m t√¨m ki·∫øm web ===
def search_web(query):
    url = "https://google.serper.dev/search"
    headers = {
        "X-API-KEY": SERPER_API_KEY,
        "Content-Type": "application/json"
    }
    data = {"q": query, "gl": "vn", "hl": "vi"}
    try:
        response = requests.post(url, headers=headers, json=data)
        response.raise_for_status()
        results = response.json()
        snippets = [item["snippet"] for item in results.get("organic", [])[:3]]
        return "\n".join(snippets) if snippets else "Kh√¥ng t√¨m th·∫•y th√¥ng tin m·ªõi."
    except Exception as e:
        print("‚ùå L·ªói khi t√¨m ki·∫øm:", e)
        return "Kh√¥ng th·ªÉ truy c·∫≠p th√¥ng tin m·ªõi."

# === Nh·∫≠n d·∫°ng gi·ªçng n√≥i t·ª´ audio ===
def audio_to_text(filepath):
    recognizer = sr.Recognizer()
    with sr.AudioFile(filepath) as source:
        audio = recognizer.record(source)
    try:
        text = recognizer.recognize_google(audio, language="vi-VN")
        return text
    except Exception as e:
        print("‚ùå L·ªói nh·∫≠n d·∫°ng gi·ªçng n√≥i:", e)
        return None

# === X·ª≠ l√Ω v·ªõi Gemini v√† t·∫°o file MP3 ===
def process_with_gemini_and_save_mp3(prompt, mp3_filename, user_ip):
    history = user_histories[user_ip]
    system_prompt = "B·∫°n h√£y tr·∫£ l·ªùi ng·∫Øn g·ªçn trong 1-2 c√¢u. (L∆∞u √Ω c√°c c√¢u h√£y ƒë·ªÉ h·∫øt tr√™n 1 d√≤ng.)\n"


    # Ch·ªâ t√¨m ki·∫øm n·∫øu c·∫ßn
    web_context = ""
    if should_search_web(prompt):
        web_info = search_web(prompt)
        web_context = f"Th√¥ng tin t√¨m ki·∫øm t·ª´ Google:\n{web_info}\n\n"

    # Gh√©p prompt
    prompt_parts = [system_prompt, web_context]
    for turn in history:
        prompt_parts.append(f"Ng∆∞·ªùi d√πng: {turn['user']}")
        prompt_parts.append(f"Tr·ª£ l√Ω: {turn['assistant']}")
    prompt_parts.append(f"Ng∆∞·ªùi d√πng: {prompt}")
    prompt_parts.append("Tr·ª£ l√Ω:")

    full_prompt = "\n".join(prompt_parts)

    response = model.generate_content(full_prompt)
    reply_text = response.text.strip()
    history.append({"user": prompt, "assistant": reply_text})

    tts = gTTS(reply_text, lang="vi")
    tts.save(mp3_filename)
    print(f"‚úÖ ƒê√£ l∆∞u file MP3: {mp3_filename}")
    return reply_text

# === Ghi log v√†o Excel ===
def save_to_excel_pandas(text, reply_text, response_time, filename="logs.xlsx"):
    new_data = {
        "Th·ªùi gian": [datetime.now().strftime("%Y-%m-%d %H:%M:%S")],
        "VƒÉn b·∫£n nh·∫≠n d·∫°ng": [text],
        "VƒÉn b·∫£n ph·∫£n h·ªìi": [reply_text],
        "Th·ªùi gian ph·∫£n h·ªìi (gi√¢y)": [round(response_time, 2)]
    }
    new_df = pd.DataFrame(new_data)

    if os.path.exists(filename):
        existing_df = pd.read_excel(filename)
        combined_df = pd.concat([existing_df, new_df], ignore_index=True)
    else:
        combined_df = new_df

    combined_df.to_excel(filename, index=False)
    print(f"üìä ƒê√£ l∆∞u log v√†o: {filename}")

# === T·∫°o file MP3 khi kh√¥ng nh·∫≠n di·ªán ƒë∆∞·ª£c ===
def create_retry_mp3(mp3_filename):
    retry_text = "M·ªùi b·∫°n n√≥i l·∫°i"
    tts = gTTS(retry_text, lang="vi")
    tts.save(mp3_filename)
    print(f"‚úÖ ƒê√£ t·∫°o file MP3 retry: {mp3_filename}")
    return retry_text

# === API nh·∫≠n file audio v√† x·ª≠ l√Ω ===
@app.route("/upload-audio", methods=["POST"])
def upload_audio():
    start_time = time.time()

    if 'file' not in request.files:
        return jsonify({"error": "Kh√¥ng c√≥ file audio trong request"}), 400

    file = request.files['file']
    if file.filename == '':
        return jsonify({"error": "T√™n file tr·ªëng"}), 400

    filename = secure_filename(file.filename)
    audio_path = os.path.join(app.config['UPLOAD_FOLDER'], filename)
    file.save(audio_path)
    print(f"üì• ƒê√£ nh·∫≠n file: {audio_path}")

    user_ip = request.remote_addr

    # Nh·∫≠n d·∫°ng gi·ªçng n√≥i
    future_text = executor.submit(audio_to_text, audio_path)
    text = future_text.result(timeout=15)

    mp3_filename = os.path.splitext(filename)[0] + "_response.mp3"
    mp3_path = os.path.join(app.config['UPLOAD_FOLDER'], mp3_filename)

    if not text:
        reply_text = create_retry_mp3(mp3_path)
        mp3_url = request.host_url + f"uploads/{mp3_filename}"
        elapsed_time = time.time() - start_time
        save_to_excel_pandas("Kh√¥ng nh·∫≠n di·ªán ƒë∆∞·ª£c", reply_text, elapsed_time)
        return jsonify({
            "text": "Kh√¥ng nh·∫≠n di·ªán ƒë∆∞·ª£c",
            "reply_text": reply_text,
            "mp3_url": mp3_url
        })

    print(f"üìù VƒÉn b·∫£n nh·∫≠n d·∫°ng: {text.lower()}")

    future_reply = executor.submit(process_with_gemini_and_save_mp3, text, mp3_path, user_ip)
    reply_text = future_reply.result(timeout=120)

    mp3_url = request.host_url + f"uploads/{mp3_filename}"
    print(f"üåê URL n·ªôi b·ªô: {mp3_url}")
    print(f"üìù Ph·∫£n h·ªìi: {reply_text}")

    elapsed_time = time.time() - start_time
    print(f"‚ö° Th·ªùi gian ph·∫£n h·ªìi: {elapsed_time:.2f} gi√¢y")

    save_to_excel_pandas(text.lower(), reply_text, elapsed_time)

    return jsonify({
        "text": text.lower(),
        "reply_text": reply_text,
        "mp3_url": mp3_url
    })

# === Tr·∫£ file MP3 ===
@app.route('/uploads/<path:filename>')
def serve_uploaded_file(filename):
    return send_from_directory(app.config['UPLOAD_FOLDER'], filename)

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=5000)
